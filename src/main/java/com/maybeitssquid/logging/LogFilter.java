package com.maybeitssquid.logging;

import javax.servlet.*;
import java.io.IOException;
import java.time.ZoneId;

/**
 * Maps HTTP headers to MDC key-value pairs.
 */
public class LogFilter implements Filter {

    /**
     * Name of the filter config parameter that overrides the log name. The default follows the traditional
     * log naming based on the name of this class.
     */
    public static final String LOG_NAME = "logName";

    /**
     * Name of the boolean filter config parameter that determines whether headers that fail int or date formatting
     * expectation are added to the MDC in raw form.
     */
    public static final String FALLBACK_TO_STRING = "fallback";

    /**
     * Name of the filter config parameter that overrides the system default time zone for formatted dates.
     */
    public static final String TIME_ZONE = "timeZone";

    private LogCapturer capturer = new NOOPCapturer();

    /**
     * Sets the capturer for this filter.
     *
     * @param capturer the capturer to use
     */
    public void setCapturer(final LogCapturer capturer) {
        this.capturer = capturer == null ? new NOOPCapturer() : capturer;
    }

    /**
     * {@inheritDoc}
     *
     * @param filterConfig Configuration parameters:
     *                     {@link LogCapturer#APPLICATION_ID} sets the application id.
     *                     {@link LogCapturer#LOG_EVENT_TYPE} enables and sets the event type for web logs.
     *                     {@link #LOG_NAME} sets the name for logs generated by this filter.
     *                     {@link #TIME_ZONE} sets the time zone for formatted dates.
     *                     {@link #FALLBACK_TO_STRING} sets whether to log values that fail parsing as raw strings.
     *                     Default is {@code false}.
     */
    @Override
    public void init(final FilterConfig filterConfig) {

        capturer.setApplicationId(filterConfig.getInitParameter(LogCapturer.APPLICATION_ID));

        capturer.setWebLogEventType(filterConfig.getInitParameter(LogCapturer.LOG_EVENT_TYPE));

        final String logName = filterConfig.getInitParameter(LOG_NAME);
        if (logName != null) {
            capturer.setLogName(logName);
        }

        final String zone = filterConfig.getInitParameter(TIME_ZONE);
        if (zone != null) {
            capturer.setTimeZone(ZoneId.of(zone));
        }

        capturer.setFallbackToString(Boolean.parseBoolean(filterConfig.getInitParameter(FALLBACK_TO_STRING)));
    }

    @Override
    public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain) throws IOException, ServletException {
        try {
            capturer.captureLogContext(request);

            chain.doFilter(request, response);

            if (capturer.isWebLogging()) {
                capturer.webLog(request, response);
            }
        } catch (final Exception e) {
            // Log even if otherwise not web logging
            capturer.webLog(request, response, e);
            throw e;
        } finally {
            capturer.reset();
        }
    }

    @Override
    public void destroy() {
        // EMPTY
    }

}
